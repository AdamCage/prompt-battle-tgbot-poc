import logging
import random
import openpyxl
from io import BytesIO
from telegram import Update, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = ""   # –ø–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 1234           # id –∞–¥–º–∏–Ω–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ

# --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–ø–∞–º—è—Ç—å) ---
game_state = {
    "active": False,
    "true_prompt": None,
    "image_file_id": None,

    # —É—á–∞—Å—Ç–Ω–∏–∫–∏ (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —á–∞—Ç—ã): {user_id}
    "subscribers": set(),

    # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∏–º–µ–Ω–∞: {user_id: "username or full name"}
    "usernames": {},

    # –æ—Ç–≤–µ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞: {user_id: {"user": str, "prompt": str, "score": int}}
    "answers": {}
}

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ú–æ–∫-–æ—Ü–µ–Ω–∫–∞ (—Ä–∞–Ω–¥–æ–º 0..100). –ó–∞–º–µ–Ω–∏—à—å –Ω–∞ ollama –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ ---
def score_prompt(_: str, __: str) -> int:
    return random.randint(0, 100)

def display_name(update: Update) -> str:
    return update.effective_user.username or update.effective_user.full_name or str(update.effective_user.id)

def add_subscriber(update: Update):
    uid = update.effective_user.id
    if uid != ADMIN_ID:  # –∞–¥–º–∏–Ω–∞ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
        game_state["subscribers"].add(uid)
        game_state["usernames"][uid] = display_name(update)

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    add_subscriber(update)
    if update.effective_user.id == ADMIN_ID:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! 1) –ö–∏–Ω—å –∫–∞—Ä—Ç–∏–Ω–∫—É. 2) /setprompt <–∏—Å—Ç–∏–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç> ‚Äî —Å—Ç–∞—Ä—Ç —Ä–∞—É–Ω–¥–∞.")
    else:
        await update.message.reply_text("–ë–∏—Ç–≤–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω—ë—Ç—Å—è. –ñ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–∞!")

async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    photo = update.message.photo[-1]  # –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    game_state["image_file_id"] = photo.file_id
    await update.message.reply_text("–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π –∏—Å—Ç–∏–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫–æ–º–∞–Ω–¥–æ–π /setprompt <—Ç–µ–∫—Å—Ç>.")

async def setprompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return

    true_prompt = " ".join(context.args)
    if not true_prompt:
        await update.message.reply_text("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–ø—Ç: /setprompt <—Ç–µ–∫—Å—Ç>")
        return
    if not game_state["image_file_id"]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É!")
        return

    # —Å—Ç–∞—Ä—Ç —Ä–∞—É–Ω–¥–∞
    game_state["true_prompt"] = true_prompt
    game_state["active"] = True
    game_state["answers"].clear()

    # –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ: –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º + –∞–¥–º–∏–Ω—É —Ä–∞—Å—Å—ã–ª–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É
    targets = set(game_state["subscribers"])
    targets.add(ADMIN_ID)

    for uid in targets:
        try:
            await context.bot.send_message(chat_id=uid, text="üöÄ –†–∞—É–Ω–¥ –Ω–∞—á–∞–ª—Å—è! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
            await context.bot.send_photo(chat_id=uid, photo=game_state["image_file_id"])
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

    await update.message.reply_text("–û–∫! –ò—Å—Ç–∏–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

async def handle_prompt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    add_subscriber(update)

    # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —Ä–∞—É–Ω–¥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω (–∞–¥–º–∏–Ω –Ω–µ –∏–≥—Ä–∞–µ—Ç)
    if not game_state["active"] or update.effective_user.id == ADMIN_ID:
        return

    user_id = update.effective_user.id
    user_prompt = (update.message.text or "").strip()
    if not user_prompt:
        return

    # —Å—á–∏—Ç–∞–µ–º —Å–∫–æ—Ä (–ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∏–≥—Ä–æ–∫—É)
    sc = score_prompt(user_prompt, game_state["true_prompt"])
    game_state["answers"][user_id] = {
        "user": game_state["usernames"].get(user_id, display_name(update)),
        "prompt": user_prompt,
        "score": sc
    }

    # –∏–≥—Ä–æ–∫—É ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–µ–∑ –æ—á–∫–æ–≤
    await update.message.reply_text("–ü—Ä–∏–Ω—è—Ç–æ! –¢–≤–æ–π –ø—Ä–æ–º–ø—Ç –∑–∞–ø–∏—Å–∞–Ω.")

    # –∞–¥–º–∏–Ω—É ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ—Ç–≤–µ—Ç–µ (—Å –ø—Ä–æ–º–ø—Ç–æ–º –∏ —Å–∫–æ—Ä–æ–º)
    try:
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=f"üìù –ù–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç @{game_state['usernames'].get(user_id, user_id)}\n"
                 f"–ü—Ä–æ–º–ø—Ç: {user_prompt}\n"
                 f"–°–∫–æ—Ä: {sc}"
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞: {e}")

async def results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return

    wb = openpyxl.Workbook()
    ws = wb.active
    ws.append(["–Ω–∏–∫", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç", "–æ—á–∫–∏"])

    # –≤—ã–≥—Ä—É–∑–∏–º –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –æ—á–∫–æ–≤
    for uid, ans in sorted(game_state["answers"].items(), key=lambda kv: kv[1]["score"], reverse=True):
        ws.append([ans["user"], ans["prompt"], ans["score"]])

    bio = BytesIO()
    wb.save(bio)
    bio.seek(0)
    await context.bot.send_document(chat_id=update.effective_chat.id, document=InputFile(bio, "results.xlsx"))

def build_ranking():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ [(user_id, user, score, place)] —Å —É—á—ë—Ç–æ–º —Ç–∞–π-–±—Ä–µ–π–∫–æ–≤ (1,2,2,4...)."""
    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    ordered = sorted(
        ((uid, v["user"], v["score"]) for uid, v in game_state["answers"].items()),
        key=lambda x: x[2],
        reverse=True
    )
    result = []
    last_score = None
    last_place = 0
    index = 0
    for uid, user, score in ordered:
        index += 1
        if score == last_score:
            place = last_place
        else:
            place = index
            last_score = score
            last_place = place
        result.append((uid, user, score, place))
    return result

async def finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return

    ranking = build_ranking()
    true_prompt = game_state["true_prompt"] or "(–Ω–µ –∑–∞–¥–∞–Ω)"

    # –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∏–≥—Ä–æ–∫–∞–º: –∏—Ö –æ—á–∫–∏, –º–µ—Å—Ç–æ –∏ –∏—Å—Ç–∏–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    for uid, user, score, place in ranking:
        try:
            await context.bot.send_message(
                chat_id=uid,
                text=f"üèÅ –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à—ë–Ω!\n"
                     f"–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –±–∞–ª–ª–æ–≤\n"
                     f"–¢–≤–æ—ë –º–µ—Å—Ç–æ: {place}\n\n"
                     f"–ò—Å—Ç–∏–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n{true_prompt}"
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")

    # –∞–¥–º–∏–Ω—É ‚Äî –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
    if ranking:
        top_lines = "\n".join([f"{pl}. @{user} ‚Äî {sc}" for _, user, sc, pl in ranking[:10]])
    else:
        top_lines = "–ù–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤."
    await context.bot.send_message(chat_id=ADMIN_ID, text=f"–ò—Ç–æ–≥–∏ —Ä–∞—É–Ω–¥–∞:\n{top_lines}")

    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    game_state.update({
        "active": False,
        "true_prompt": None,
        "image_file_id": None,
        "answers": {}
    })

# --- main ---
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setprompt", setprompt))
    app.add_handler(CommandHandler("results", results))
    app.add_handler(CommandHandler("finish", finish))

    app.add_handler(MessageHandler(filters.PHOTO, handle_image))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_prompt))

    app.run_polling()

if __name__ == "__main__":
    main()
